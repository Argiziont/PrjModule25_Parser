/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.2.0 (NJsonSchema v10.3.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class WebScraperClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
      this.http = http ? http : <any>window;
      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
  }

  get(url: string | null | undefined): Promise<CarAdvert[]> {
      let url_ = this.baseUrl + "/WebScraper/Get?";
      if (url !== undefined && url !== null)
          url_ += "url=" + encodeURIComponent("" + url) + "&";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "GET",
          headers: {
              "Accept": "application/json"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processGet(_response);
      });
  }

  protected processGet(response: Response): Promise<CarAdvert[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(CarAdvert.fromJS(item));
          }
          return result200;
          });
      } else if (status === 400) {
          return response.text().then((_responseText) => {
          let result400: any = null;
          let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = Exception.fromJS(resultData400);
          return throwException("A server side error occurred.", status, _responseText, _headers, result400);
          });
      } else {
          return response.text().then((_responseText) => {
          let resultdefault: any = null;
          let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          resultdefault = ProblemDetails.fromJS(resultDatadefault);
          return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
          });
      }
  }
}

export class CarAdvert implements ICarAdvert {
  advertId?: number;
  title?: string | undefined;
  scuCode?: string | undefined;
  presence?: string | undefined;
  description?: string | undefined;
  price?: string | undefined;
  fullPrice?: string | undefined;
  optPrice?: string | undefined;
  currency?: string | undefined;
  fullCurrency?: string | undefined;
  optCurrency?: string | undefined;
  companyName?: string | undefined;
  positivePercent?: string | undefined;
  ratingsPerLastYear?: string | undefined;
  imageUrls?: string[] | undefined;

  constructor(data?: ICarAdvert) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.advertId = _data["advertId"];
          this.title = _data["title"];
          this.scuCode = _data["scuCode"];
          this.presence = _data["presence"];
          this.description = _data["description"];
          this.price = _data["price"];
          this.fullPrice = _data["fullPrice"];
          this.optPrice = _data["optPrice"];
          this.currency = _data["currency"];
          this.fullCurrency = _data["fullCurrency"];
          this.optCurrency = _data["optCurrency"];
          this.companyName = _data["companyName"];
          this.positivePercent = _data["positivePercent"];
          this.ratingsPerLastYear = _data["ratingsPerLastYear"];
          if (Array.isArray(_data["imageUrls"])) {
              this.imageUrls = [] as any;
              for (let item of _data["imageUrls"])
                  this.imageUrls!.push(item);
          }
      }
  }

  static fromJS(data: any): CarAdvert {
      data = typeof data === 'object' ? data : {};
      let result = new CarAdvert();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["advertId"] = this.advertId;
      data["title"] = this.title;
      data["scuCode"] = this.scuCode;
      data["presence"] = this.presence;
      data["description"] = this.description;
      data["price"] = this.price;
      data["fullPrice"] = this.fullPrice;
      data["optPrice"] = this.optPrice;
      data["currency"] = this.currency;
      data["fullCurrency"] = this.fullCurrency;
      data["optCurrency"] = this.optCurrency;
      data["companyName"] = this.companyName;
      data["positivePercent"] = this.positivePercent;
      data["ratingsPerLastYear"] = this.ratingsPerLastYear;
      if (Array.isArray(this.imageUrls)) {
          data["imageUrls"] = [];
          for (let item of this.imageUrls)
              data["imageUrls"].push(item);
      }
      return data; 
  }
}

export interface ICarAdvert {
  advertId?: number;
  title?: string | undefined;
  scuCode?: string | undefined;
  presence?: string | undefined;
  description?: string | undefined;
  price?: string | undefined;
  fullPrice?: string | undefined;
  optPrice?: string | undefined;
  currency?: string | undefined;
  fullCurrency?: string | undefined;
  optCurrency?: string | undefined;
  companyName?: string | undefined;
  positivePercent?: string | undefined;
  ratingsPerLastYear?: string | undefined;
  imageUrls?: string[] | undefined;
}

export class Exception implements IException {
  stackTrace?: string | undefined;
  message?: string;
  innerException?: Exception | undefined;
  source?: string | undefined;

  constructor(data?: IException) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.stackTrace = _data["StackTrace"];
          this.message = _data["Message"];
          this.innerException = _data["InnerException"] ? Exception.fromJS(_data["InnerException"]) : <any>undefined;
          this.source = _data["Source"];
      }
  }

  static fromJS(data: any): Exception {
      data = typeof data === 'object' ? data : {};
      let result = new Exception();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["StackTrace"] = this.stackTrace;
      data["Message"] = this.message;
      data["InnerException"] = this.innerException ? this.innerException.toJSON() : <any>undefined;
      data["Source"] = this.source;
      return data; 
  }
}

export interface IException {
  stackTrace?: string | undefined;
  message?: string;
  innerException?: Exception | undefined;
  source?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  constructor(data?: IProblemDetails) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.type = _data["type"];
          this.title = _data["title"];
          this.status = _data["status"];
          this.detail = _data["detail"];
          this.instance = _data["instance"];
      }
  }

  static fromJS(data: any): ProblemDetails {
      data = typeof data === 'object' ? data : {};
      let result = new ProblemDetails();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["type"] = this.type;
      data["title"] = this.title;
      data["status"] = this.status;
      data["detail"] = this.detail;
      data["instance"] = this.instance;
      return data; 
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  throw new ApiException(message, status, response, headers, result);
}